{"ast":null,"code":"import _slicedToArray from\"/Users/johnsonanikethnagamallah/Desktop/MyProject/ecommerce/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import'./Payment.css';import{useStateValue}from\"./StateProvider\";import CheckoutProduct from\"./CheckoutProduct\";import{Link,useHistory}from\"react-router-dom\";// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from\"react-currency-format\";import{getBasketTotal}from\"./reducer\";// import axios from './axios';\nimport{db}from\"./firebase\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function Payment(){var _useStateValue=useStateValue(),_useStateValue2=_slicedToArray(_useStateValue,2),_useStateValue2$=_useStateValue2[0],basket=_useStateValue2$.basket,user=_useStateValue2$.user,dispatch=_useStateValue2[1];// const history = useHistory();\n// // const stripe = useStripe();\n// // const elements = useElements();\n// const [succeeded, setSucceeded] = useState(false);\n// const [processing, setProcessing] = useState(\"\");\n// const [error, setError] = useState(null);\n// const [disabled, setDisabled] = useState(true);\n// const [clientSecret, setClientSecret] = useState(true);\n// useEffect(() => {\n//     // generate the special stripe secret which allows us to charge a customer\n//     const getClientSecret = async () => {\n//         const response = await axios({\n//             method: 'post',\n//             // Stripe expects the total in a currencies subunits\n//             url: `/payments/create?total=${getBasketTotal(basket) * 100}`\n//         });\n//         setClientSecret(response.data.clientSecret)\n//     }\n//     getClientSecret();\n// }, [basket])\n// console.log('THE SECRET IS >>>', clientSecret)\n// console.log('ğŸ‘±', user)\n// const handleSubmit = async (event) => {\n//     // do all the fancy stripe stuff...\n//     event.preventDefault();\n//     setProcessing(true);\n//     const payload = await stripe.confirmCardPayment(clientSecret, {\n//         payment_method: {\n//             card: elements.getElement(CardElement)\n//         }\n//     }).then(({ paymentIntent }) => {\n//         // paymentIntent = payment confirmation\n//         db\n//           .collection('users')\n//           .doc(user?.uid)\n//           .collection('orders')\n//           .doc(paymentIntent.id)\n//           .set({\n//               basket: basket,\n//               amount: paymentIntent.amount,\n//               created: paymentIntent.created\n//           })\n//         setSucceeded(true);\n//         setError(null)\n//         setProcessing(false)\n//         dispatch({\n//             type: 'EMPTY_BASKET'\n//         })\n//         history.replace('/orders')\n//     })\n// }\n// const handleChange = event => {\n//     // Listen for changes in the CardElement\n//     // and display any errors as the customer types their card details\n//     setDisabled(event.empty);\n//     setError(event.error ? event.error.message : \"\");\n// }\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"payment\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"payment__container\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Checkout (\",/*#__PURE__*/_jsxs(Link,{to:\"/checkout\",children:[basket===null||basket===void 0?void 0:basket.length,\" items\"]}),\")\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment__section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"payment__title\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Delivery Address\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment__address\",children:[/*#__PURE__*/_jsx(\"p\",{children:user===null||user===void 0?void 0:user.email}),/*#__PURE__*/_jsx(\"p\",{children:\"123 React Lane\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Los Angeles, CA\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment__section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"payment__title\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Review items and delivery\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"payment__items\",children:basket.map(function(item){return/*#__PURE__*/_jsx(CheckoutProduct,{id:item.id,title:item.title,image:item.image,price:item.price,rating:item.rating});})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment__section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"payment__title\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Payment Method\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"payment__details\"})]})]})});}export default Payment;","map":{"version":3,"sources":["/Users/johnsonanikethnagamallah/Desktop/MyProject/ecommerce/src/Payment.js"],"names":["React","useState","useEffect","useStateValue","CheckoutProduct","Link","useHistory","CurrencyFormat","getBasketTotal","db","Payment","basket","user","dispatch","length","email","map","item","id","title","image","price","rating"],"mappings":"kLAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAO,eAAP,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,OAASC,IAAT,CAAeC,UAAf,KAAiC,kBAAjC,CACA;AACA,MAAOC,CAAAA,cAAP,KAA2B,uBAA3B,CACA,OAASC,cAAT,KAA+B,WAA/B,CACA;AACA,OAASC,EAAT,KAAmB,YAAnB,C,wFAEA,QAASC,CAAAA,OAAT,EAAmB,CACf,mBAAqCP,aAAa,EAAlD,sFAASQ,MAAT,kBAASA,MAAT,CAAiBC,IAAjB,kBAAiBA,IAAjB,CAAyBC,QAAzB,oBACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACI,YAAK,SAAS,CAAC,SAAf,uBACI,aAAK,SAAS,CAAC,oBAAf,wBACI,gDAEQ,MAAC,IAAD,EAAM,EAAE,CAAC,WAAT,WAAsBF,MAAtB,SAAsBA,MAAtB,iBAAsBA,MAAM,CAAEG,MAA9B,YAFR,OADJ,cASI,aAAK,SAAS,CAAC,kBAAf,wBACI,YAAK,SAAS,CAAC,gBAAf,uBACI,wCADJ,EADJ,cAII,aAAK,SAAS,CAAC,kBAAf,wBACI,mBAAIF,IAAJ,SAAIA,IAAJ,iBAAIA,IAAI,CAAEG,KAAV,EADJ,cAEI,qCAFJ,cAGI,sCAHJ,GAJJ,GATJ,cAqBI,aAAK,SAAS,CAAC,kBAAf,wBACI,YAAK,SAAS,CAAC,gBAAf,uBACI,iDADJ,EADJ,cAII,YAAK,SAAS,CAAC,gBAAf,UACKJ,MAAM,CAACK,GAAP,CAAW,SAAAC,IAAI,qBACZ,KAAC,eAAD,EACI,EAAE,CAAEA,IAAI,CAACC,EADb,CAEI,KAAK,CAAED,IAAI,CAACE,KAFhB,CAGI,KAAK,CAAEF,IAAI,CAACG,KAHhB,CAII,KAAK,CAAEH,IAAI,CAACI,KAJhB,CAKI,MAAM,CAAEJ,IAAI,CAACK,MALjB,EADY,EAAf,CADL,EAJJ,GArBJ,cAwCI,aAAK,SAAS,CAAC,kBAAf,wBACI,YAAK,SAAS,CAAC,gBAAf,uBACI,sCADJ,EADJ,cAII,YAAK,SAAS,CAAC,kBAAf,EAJJ,GAxCJ,GADJ,EADJ,CA4EH,CAED,cAAeZ,CAAAA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Payment.css';\nimport { useStateValue } from \"./StateProvider\";\nimport CheckoutProduct from \"./CheckoutProduct\";\nimport { Link, useHistory } from \"react-router-dom\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getBasketTotal } from \"./reducer\";\n// import axios from './axios';\nimport { db } from \"./firebase\";\n\nfunction Payment() {\n    const [{ basket, user }, dispatch] = useStateValue();\n    // const history = useHistory();\n\n    // // const stripe = useStripe();\n    // // const elements = useElements();\n\n    // const [succeeded, setSucceeded] = useState(false);\n    // const [processing, setProcessing] = useState(\"\");\n    // const [error, setError] = useState(null);\n    // const [disabled, setDisabled] = useState(true);\n    // const [clientSecret, setClientSecret] = useState(true);\n\n    // useEffect(() => {\n    //     // generate the special stripe secret which allows us to charge a customer\n    //     const getClientSecret = async () => {\n    //         const response = await axios({\n    //             method: 'post',\n    //             // Stripe expects the total in a currencies subunits\n    //             url: `/payments/create?total=${getBasketTotal(basket) * 100}`\n    //         });\n    //         setClientSecret(response.data.clientSecret)\n    //     }\n\n    //     getClientSecret();\n    // }, [basket])\n\n    // console.log('THE SECRET IS >>>', clientSecret)\n    // console.log('ğŸ‘±', user)\n\n    // const handleSubmit = async (event) => {\n    //     // do all the fancy stripe stuff...\n    //     event.preventDefault();\n    //     setProcessing(true);\n\n    //     const payload = await stripe.confirmCardPayment(clientSecret, {\n    //         payment_method: {\n    //             card: elements.getElement(CardElement)\n    //         }\n    //     }).then(({ paymentIntent }) => {\n    //         // paymentIntent = payment confirmation\n\n    //         db\n    //           .collection('users')\n    //           .doc(user?.uid)\n    //           .collection('orders')\n    //           .doc(paymentIntent.id)\n    //           .set({\n    //               basket: basket,\n    //               amount: paymentIntent.amount,\n    //               created: paymentIntent.created\n    //           })\n\n    //         setSucceeded(true);\n    //         setError(null)\n    //         setProcessing(false)\n\n    //         dispatch({\n    //             type: 'EMPTY_BASKET'\n    //         })\n\n    //         history.replace('/orders')\n    //     })\n\n    // }\n\n    // const handleChange = event => {\n    //     // Listen for changes in the CardElement\n    //     // and display any errors as the customer types their card details\n    //     setDisabled(event.empty);\n    //     setError(event.error ? event.error.message : \"\");\n    // }\n\n    return (\n        <div className='payment'>\n            <div className='payment__container'>\n                <h1>\n                    Checkout (\n                        <Link to=\"/checkout\">{basket?.length} items</Link>\n                        )\n                </h1>\n\n\n                {/* Payment section - delivery address */}\n                <div className='payment__section'>\n                    <div className='payment__title'>\n                        <h3>Delivery Address</h3>\n                    </div>\n                    <div className='payment__address'>\n                        <p>{user?.email}</p>\n                        <p>123 React Lane</p>\n                        <p>Los Angeles, CA</p>\n                    </div>\n                </div>\n\n                {/* Payment section - Review Items */}\n                <div className='payment__section'>\n                    <div className='payment__title'>\n                        <h3>Review items and delivery</h3>\n                    </div>\n                    <div className='payment__items'>\n                        {basket.map(item => (\n                            <CheckoutProduct\n                                id={item.id}\n                                title={item.title}\n                                image={item.image}\n                                price={item.price}\n                                rating={item.rating}\n                            />\n                        ))}\n                    </div>\n                </div>\n            \n\n                {/* Payment section - Payment method */}\n                <div className='payment__section'>\n                    <div className=\"payment__title\">\n                        <h3>Payment Method</h3>\n                    </div>\n                    <div className=\"payment__details\">\n                            {/* Stripe magic will go */}\n\n                            {/* <form onSubmit={handleSubmit}>\n                                <CardElement onChange={handleChange}/>\n\n                                <div className='payment__priceContainer'>\n                                    <CurrencyFormat\n                                        renderText={(value) => (\n                                            <h3>Order Total: {value}</h3>\n                                        )}\n                                        decimalScale={2 s}\n                                        value={getBasketTotal(basket)}\n                                        displayType={\"text\"}\n                                        thousandSeparator={true}\n                                        prefix={\"$\"}\n                                    />\n                                    <button disabled={processing || disabled || succeeded}>\n                                        <span>{processing ? <p>Processing</p> : \"Buy Now\"}</span>\n                                    </button>\n                                </div>\n\n                                //   {/* Errors */}\n                             {/* {error && <div>{error}</div>}\n                            </form> */}\n                    </div>      \n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Payment"]},"metadata":{},"sourceType":"module"}